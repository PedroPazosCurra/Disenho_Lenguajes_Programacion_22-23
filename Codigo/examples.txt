sum = letrec sum : Nat -> Nat -> Nat =
		lambda n : Nat. lambda m : Nat. 
		if iszero n then m else succ (sum (pred n) m) in sum;;

sum 23 24;;

prod = letrec prod: Nat -> Nat -> Nat =
		lambda n : Nat. lambda m : Nat. 
		if iszero m then 0 else (if iszero (pred m) then n else sum n (prod n (pred m))) in prod;;

prod 6 5;;

fact = letrec fact: Nat -> Nat =
		lambda n: Nat.
		if iszero n then 1 else prod n (fact (pred n)) in fact;;

fact 6;;

fib = letrec fib: Nat -> Nat =
	lambda n: Nat.
	if iszero (pred (pred n)) then 1 else sum (fib (pred (pred n))) (fib (pred n)) in fib;;

fib 5;;


"Hola";;
concat "Ho" "la";;
let c = L x:String. concat "ho" x in c "la";;
let c = L x:String. (L y:String. concat x y) in c "hola " "mundo";;


{"Hello", succ (succ 0), true};;
{"Hello", succ (succ 0), true}.1;;
{"Hello", succ (succ 0), true}.2;;


unit;;
unit; (succ 0);;


print_string "Hola" ;;
print_string (concat "Ho" "la") ;;
print_nat 5 ;;
print_nat (succ 4) ;;
print_newline unit ;;